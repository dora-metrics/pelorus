---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-api
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-api
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - patch
  - update
- apiGroups:
  - "route.openshift.io"
  resources:
  - routes
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-api
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-api
subjects:
- kind: ServiceAccount
  name: grafana-api
  namespace: {{ .Release.Namespace }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-create-apikey
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      containers:
        - image: registry.redhat.io/web-terminal-tech-preview/web-terminal-tooling-rhel8:1.0.1
          command:
            - /bin/bash
            - -c
            - |
              # Install jq
              curl -o jq -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x jq

              # Grab the information we need to make initial api calls to grafana
              admin_pw=$(oc get secrets grafana-admin-credentials -o jsonpath='{.data.GF_SECURITY_ADMIN_PASSWORD}' | base64 -d)
              grafana_url=$(oc get route grafana-route -o jsonpath='{.spec.host}')

              orgId=1
              echo $orgId

              # Switch to the new org context
              curl -s -k -X POST https://admin:${admin_pw}@${grafana_url}/api/user/using/${orgId}

              # Create the apikey we will use in the future
              apikey=$(curl -s -k -X POST -H "Content-Type: application/json" -d '{"name":"apikeycurl", "role": "Admin"}' https://admin:${admin_pw}@${grafana_url}/api/auth/keys)
              echo "$apikey"
              message=$(echo $apikey | ./jq -r .message)
              if [ "${message}" == "API Key Organization ID And Name Must Be Unique" ]; then
                # Key already exists and we can't fetch the key. Delete the key and recreate.
                apikeys=$(curl -s -k https://admin:${admin_pw}@${grafana_url}/api/auth/keys)
                apikeyId=$(echo $apikeys | ./jq '.[] | select(.name=="apikeycurl") | .id')
                deletekey=$(curl -s -k -X DELETE -H "Content-Type: application/json" https://admin:${admin_pw}@${grafana_url}/api/auth/keys/${apikeyId})
                apikey=$(curl -s -k -X POST -H "Content-Type: application/json" -d '{"name":"apikeycurl", "role": "Admin"}' https://admin:${admin_pw}@${grafana_url}/api/auth/keys)
              fi
              apikey_name=$(echo $apikey | ./jq -r .name)
              apikey_key=$(echo $apikey | ./jq -r .key)
              echo $apikey_name

              # Save apikey as a secret
              echo "apiVersion: v1
              stringData:
                name: $apikey_name
                key: $apikey_key
              kind: Secret
              metadata:
                name: grafana-apikey
              type: Opaque" | oc apply -f- 

          imagePullPolicy: Always
          name: main
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: grafana-api
      serviceAccountName: grafana-api
      terminationGracePeriodSeconds: 30