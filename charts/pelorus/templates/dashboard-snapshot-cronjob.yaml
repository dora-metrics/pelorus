---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dashboard-snapshots

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dashboard-snapshots
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - "route.openshift.io"
  resources:
  - routes
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dashboard-snapshots
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dashboard-snapshots
subjects:
- kind: ServiceAccount
  name: dashboard-snapshots
  namespace: {{ .Release.Namespace }}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dashboard-snapshots
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          activeDeadlineSeconds: 500
          containers:
          - command:
            - /bin/bash
            - -c
            - |
              # Install jq
              curl -so jq -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x jq

              # Grab the information we need to make initial api calls to grafana
              apikey=$(oc get secrets grafana-apikey -o jsonpath='{.data.key}' | base64 -d)
              grafana_url=$(oc get route grafana-route -o jsonpath='{.spec.host}')

              # Get the dashboard we want to snapshot
              dashboard_search=$(curl -s -k -H "Authorization: Bearer $apikey" "https://${grafana_url}/api/search?query=Software&tag=global&type=dash-db")
              dash_uid=$(echo $dashboard_search | ./jq -r .[0].uid)
              dashboard_data=$(curl -s -k -H "Authorization: Bearer $apikey" "https://${grafana_url}/api/dashboards/uid/${dash_uid}")
              dashboard="{ \"dashboard\": $(echo "$dashboard_data" | ./jq .dashboard) }"
              snapshot=$(curl -s -k -X POST -H "Authorization: Bearer $apikey" -H "Content-Type: application/json" -d "${dashboard}" "https://${grafana_url}/api/snapshots")
              snap_key=$(echo $snapshot | ./jq -r .key)

              echo "New Snapshot: https://${grafana_url}/dashboard/snapshot/${snap_key}"
            image: quay.io/wto/web-terminal-tooling:1.2
            name: dashboard-snapshots
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          serviceAccount: dashboard-snapshots
          serviceAccountName: dashboard-snapshots
          terminationGracePeriodSeconds: 30
  schedule: "{{ .Values.snapshot_schedule }}"
  successfulJobsHistoryLimit: 2
