---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-api
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-api
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - patch
  - update
- apiGroups:
  - "route.openshift.io"
  resources:
  - routes
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-api
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-api
subjects:
- kind: ServiceAccount
  name: grafana-api
  namespace: {{ .Release.Namespace }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-create-apikey
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      containers:
        - image: quay.io/wto/web-terminal-tooling:1.2
          command:
            - /bin/bash
            - -c
            - |
              # Install jq
              curl -o jq -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x jq

              # Grab the information we need to make initial api calls to grafana
              echo "Get grafana URL and Credentials"
              secret=1
              route=1
              until [ $secret -eq 0 ] && [ $route -eq 0 ]; do
                sleep 1
                admin_pw=$(oc get secrets grafana-admin-credentials -o jsonpath='{.data.GF_SECURITY_ADMIN_PASSWORD}' | base64 -d)
                secret=$?
                grafana_url=$(oc get route grafana-route -o jsonpath='{.spec.host}')
                route=$?
              done


              # Wait until grafana api is up
              echo "Wait for grafana to be up"
              up=1
              until [ $up -eq 0 ] && [ "$(echo $health | ./jq -r .database)" == "ok" ]; do
                health=$(curl -s -k -X GET https://admin:${admin_pw}@${grafana_url}/api/health)
                up=$?
              done

              # Switch to the new org context
              orgId=1
              curl -s -k -X POST https://admin:${admin_pw}@${grafana_url}/api/user/using/${orgId} || exit 1

              # Create the apikey we will use in the future
              echo "Creating new api key"
              apikey=$(curl -s -k -X POST -H "Content-Type: application/json" -d '{"name":"apikeycurl", "role": "Admin"}' https://admin:${admin_pw}@${grafana_url}/api/auth/keys)
              message=$(echo $apikey | ./jq -r .message)
              if [ "${message}" == "API Key Organization ID And Name Must Be Unique" ]; then
                # Key already exists and we can't fetch the key. Delete the key and recreate.
                apikeys=$(curl -s -k https://admin:${admin_pw}@${grafana_url}/api/auth/keys)
                apikeyId=$(echo $apikeys | ./jq '.[] | select(.name=="apikeycurl") | .id')
                deletekey=$(curl -s -k -X DELETE -H "Content-Type: application/json" https://admin:${admin_pw}@${grafana_url}/api/auth/keys/${apikeyId})
                apikey=$(curl -s -k -X POST -H "Content-Type: application/json" -d '{"name":"apikeycurl", "role": "Admin"}' https://admin:${admin_pw}@${grafana_url}/api/auth/keys)
              fi
              apikey_name=$(echo $apikey | ./jq -r .name)
              apikey_key=$(echo $apikey | ./jq -r .key)

              # Save apikey as a secret
              echo "{
                \"apiVersion\": \"v1\",
                \"stringData\": {
                    \"name\": \"${apikey_name}\",
                    \"key\": \"${apikey_key}\"
                },
                \"kind\": \"Secret\",
                \"metadata\": {
                    \"name\": \"grafana-apikey\",
                    \"type\": \"Opaque\"
                }
              }" | oc apply -f- 
              echo "API Key saved to secret."

          imagePullPolicy: Always
          name: main
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: grafana-api
      serviceAccountName: grafana-api
      terminationGracePeriodSeconds: 30