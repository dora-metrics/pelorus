#!/usr/bin/env bash
#
# Copyright Red Hat
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#

# Get the full absolute path to the script. Needed while calling the script
# via various partial paths or sourcing the file from shell
# BASH_SOURCE[0] is safer then $0 when sourcing.
# We enter the dirname of the invoked script and then get the current
# path of the script using pwd
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
# Match the .venv created by the Makefile
DEFAULT_VENV="${SCRIPT_DIR}/../.venv"

TMP_DIR_PREFIX="pelorus_tmp_"

TKN_CLIENT_API_URL="https://api.github.com/repos/tektoncd/cli/releases/latest"
CT_CLIENT_API_URL="https://api.github.com/repos/helm/chart-testing/releases/latest"

HELM_INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"

# Currently we are interested in development on Linux and Mac OS platforms
# Because OCP_CLIENT URL links do not follow standard binary name format
# e.g. Linux/Darwin we need to map those 
PLATFORM="linux"
[[ "$(uname -s)" =~ "Darwin" ]] && PLATFORM="mac"
OCP_CLIENT_URL="https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-${PLATFORM}.tar.gz"


function download_file_from_url() {
    local url=$1
    local dest_folder=$2

    pushd "${dest_folder}" || exit
      echo "Downloading file: ${url}"
      echo "To: ${dest_folder}"
      curl -LO "${url}"
    popd || exit
}

function extract_file_to_dir() {
    local file_path=$1
    local dest_dir=$2
    local file_names=$3 # Extract only specific files

    if [ ! -f "${file_path}" ]; then
        echo "extract_file_to_dir(): File does not exists: ${file_path}" >&2
        return 2
    fi

    if [ ! -d "${dest_dir}" ]; then
        echo "extract_file_to_dir(): Dest dir does not exists: ${dest_dir}" >&2
        return 2
    fi

    # shellcheck disable=SC2086 # We need to expand $file_names
    tar xvzf "${file_path}" -C "${dest_dir}" ${file_names}
}

function get_download_url_from_github_api() {
    local api_url=$1
    if [ -z "${api_url}" ]; then
        echo "get_download_url_from_github(): API URL not provided" >&2
        return 2
    fi

    local arch
    local kernel_name
    arch="$(uname -m)"
    kernel_name="$(uname -s)" # e.g. Linux / Darwin

    # Little hack for grep as some projects are shipping release tarballs
    # as x86_64 and some as amd64
    if [[ "${arch}" == "x86_64" ]]; then
        arch="-e ${arch} -e amd64"
    elif [[ "${arch}" == "amd64" ]]; then
        arch="-e ${arch} -e x86_64"
    fi

    # Call the API to find the latest binary matching kernel and architecture
    local url_cmd
    local download_url
    url_cmd="curl -s ${api_url} | \
          grep -o -E 'https://(.*).tar.gz' | \
          grep -i '${kernel_name}' | \
          grep ${arch}"
    download_url=$(eval "${url_cmd}")

    if [ -z "${download_url}" ]; then
        echo "get_download_url_from_github(): download_url not available." >&2
        echo "command used to get URL: $ ${url_cmd}" >&2
        return 2
    fi

    # Return URL
    echo "${download_url}"
}

# Installs helm into .venv path
function install_helm() {
    local helm_install_script=$1
    local dest_dir=$2
    if [ ! -f "${helm_install_script}" ]; then
        echo "install_helm(): File does not exists: ${helm_install_script}" >&2
        return 2
    fi

    if [ ! -d "${dest_dir}" ]; then
        echo "install_helm(): Dest dir does not exists: ${dest_dir}" >&2
        return 2
    fi

    chmod +x "${helm_install_script}" 
    HELM_INSTALL_DIR="${dest_dir}" USE_SUDO=false "${helm_install_script}"
}

# Function to safely remove temporary files and temporary download dir
# Argument is optional exit value to propagate it after cleanup
function cleanup_and_exit() {
    local exit_val=$1
    if [ -z "${DWN_DIR}" ]; then
        echo "cleanup_and_exit(): Temp download dir not provided !" >&2
    else
      # Ensure dir exists and starts with prefix
      if [ -d "${DWN_DIR}" ]; then
          PELORUS_TMP_DIR=$(basename "${DWN_DIR}")
          if [[ "${PELORUS_TMP_DIR}" =~ "${TMP_DIR_PREFIX}"* ]]; then
              echo "Cleaning up temporary files"
              eval rm -f "${DWN_DIR}/*"
              rmdir "${DWN_DIR}"
          fi
      fi
    fi
    # Propagate exit value if was provided
    [ -n "${exit_val}" ] && exit "$exit_val"
    exit 0
}

function print_help() {
    printf "\nUsage: %s [OPTION]... -v [DIR]\n\n" % "$0"
    printf "\tStartup:\n"
    printf "\t  -h\tprint this help\n"
    printf "\n\tOptions:\n"
    printf "\t  -v\tpath to virtualenv DIR\n"

    exit 0
}

### Options
OPTIND=1
while getopts "h?v:" option; do
    case "$option" in
    h|\?) print_help;;
    v)    venv_dir=$OPTARG;;
    esac
done

if [ -z "${venv_dir}" ]; then
    VENV="${DEFAULT_VENV}"
else
    VENV="${venv_dir}"
fi

# Create download directory inside virtual env dir
DWN_DIR=$(TMPDIR="${VENV}" mktemp -d -t "${TMP_DIR_PREFIX}XXXXX") || exit 2

trap 'cleanup_and_exit' INT TERM EXIT

# Helm install
if ! [ -x "$(command -v "${VENV}/bin/helm")" ]; then
    echo "Installing helm CLI to: ${VENV}/bin/helm"
    download_file_from_url "${HELM_INSTALL_SCRIPT}" "${DWN_DIR}"
    HELM_SCRIPT="${DWN_DIR}"/$(basename "${HELM_INSTALL_SCRIPT}")
    install_helm "${HELM_SCRIPT}" "${VENV}/bin"
fi

# Tekton install
if ! [ -x "$(command -v "${VENV}/bin/tkn")" ]; then
    echo "Installing tkn CLI to: ${VENV}/bin/tkn"
    TKN_CLIENT_URL=$(get_download_url_from_github_api "${TKN_CLIENT_API_URL}")
    download_file_from_url "${TKN_CLIENT_URL}" "${DWN_DIR}"
    TKN_CLIENT_PATH="${DWN_DIR}"/$(basename "${TKN_CLIENT_URL}")
    extract_file_to_dir "${TKN_CLIENT_PATH}" "${VENV}/bin/" "tkn"
fi

# OC install
if ! [ -x "$(command -v "${VENV}/bin/oc")" ]; then
    echo "Installing oc CLI to: ${VENV}/bin/oc"
    download_file_from_url "${OCP_CLIENT_URL}" "${DWN_DIR}"
    OCP_CLIENT_PATH="${DWN_DIR}"/$(basename "${OCP_CLIENT_URL}")
    # We are interested only in oc/kubectl binaries
    extract_file_to_dir "${OCP_CLIENT_PATH}" "${VENV}/bin/" "oc kubectl"
fi

# CT install
if ! [ -x "$(command -v "${VENV}/bin/ct")" ]; then
    CT_CLIENT_URL=$(get_download_url_from_github_api "${CT_CLIENT_API_URL}") \
                  || (echo "$CT_CLIENT_URL"; cleanup_and_exit 2)
    download_file_from_url "${CT_CLIENT_URL}" "${DWN_DIR}"
    CT_CLIENT_PATH="${DWN_DIR}"/$(basename "${CT_CLIENT_URL}")
    extract_file_to_dir "${CT_CLIENT_PATH}" "${VENV}/bin/" "ct"
fi
