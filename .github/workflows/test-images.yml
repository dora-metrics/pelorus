name: Test images manager

on:
  workflow_run:
    workflows: [Trigger test images]
    types: [completed]

env:
  REPOSITORY: quay.io/pelorus

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pr_type: ${{ steps.variables.outputs.pr_type }}
      pr_number: ${{ steps.variables.outputs.pr_number }}
      commit_hash: ${{ steps.variables.outputs.commit_hash }}
    steps:
      - name: Download trigger information
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: trigger-test-images.yml
          run_id: ${{ github.event.workflow_run.id }}
          name: trigger-information
          path: ./

      # TODO remove!!!
      - name: DEBUG
        run: cat trigger-information.json

      - name: Store variables
        id: variables
        run: |
          echo pr_type=$(cat trigger-information.json | jq '.pr_type') >> "$GITHUB_OUTPUT"
          echo pr_number=$(cat trigger-information.json | jq '.pr_number') >> "$GITHUB_OUTPUT"
          echo commit_hash=$(cat trigger-information.json | jq '.commit_hash') >> "$GITHUB_OUTPUT"

  # TODO
  # delete-images:
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.setup.outputs.pr_type == 'closed' }}
  #   needs: setup
  #   steps:
  #     - name: Delete test images
  #       run: |
  #         podman search --list-tags $REPOSITORY/rc-pelorus-exporter
  #         podman search --list-tags $REPOSITORY/rc-pelorus-operator
  #         podman search --list-tags $REPOSITORY/rc-pelorus-operator-bundle
  #         delete all that have pr${{ needs.setup.outputs.pr_number }} in name...

  create-images:
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.pr_type != 'closed' }}
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build exporter test image
        id: build-exporter
        uses: redhat-actions/s2i-build@v2
        with:
          image: rc-pelorus-exporter
          path_context: 'exporters'
          builder_image: 'registry.access.redhat.com/ubi8/python-39'
          tags: vpr${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.commit_hash }}

      - name: Push exporter test image to Quay.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-exporter.outputs.image }}
          tags: ${{ steps.build-exporter.outputs.tags }}
          registry: $REPOSITORY
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Log in to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
          registry: quay.io

      - name: Use test images in operator
        env:
          TEST_VERSION: pr${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.commit_hash }}
          CURRENT_OPERATOR_VERSION: $(grep "VERSION ?= " Makefile  | cut -c 12-)
          CURRENT_CHART_VERSION: "$(grep '^version: ' helm-charts/pelorus/Chart.yaml  | cut -c 10-)"
          DEFAULT_OPERATOR_IMAGE: $REPOSITORY/pelorus-operator:$CURRENT_OPERATOR_VERSION
          TEST_OPERATOR_IMAGE: $REPOSITORY/rc-pelorus-operator:$TEST_VERSION
          DEFAULT_EXPORTER_IMAGE: $REPOSITORY/pelorus-{{ .exporter_type }}-exporter:{{ .image_tag | default \"v$CURRENT_CHART_VERSION\" }}
          TEST_EXPORTER_IMAGE: $REPOSITORY/rc-pelorus-exporter:{{ .image_tag | default \"v$TEST_VERSION\" }}
        working-directory: ./pelorus-operator
        run: |
          sed -i "s,$DEFAULT_OPERATOR_IMAGE,$TEST_OPERATOR_IMAGE,g" bundle/manifests/pelorus-operator.clusterserviceversion.yaml
          sed -i "s,$DEFAULT_EXPORTER_IMAGE,$TEST_EXPORTER_IMAGE,g" helm-charts/pelorus/charts/exporters/templates/_imagestream_from_image.yaml
          sed -i "s,$CURRENT_CHART_VERSION,$TEST_VERSION,g" helm-charts/pelorus/charts/exporters/templates/_deploymentconfig.yaml
          sed -i "s,$CURRENT_OPERATOR_VERSION,$TEST_VERSION,g" Makefile
          sed -i "s,pelorus-operator,rc-pelorus-operator,g" Makefile
          find . -type f | xargs sed -i "s,$CURRENT_OPERATOR_VERSION,$CURRENT_OPERATOR_VERSION-$TEST_VERSION,g"
          find . -type f | xargs sed -i "s,$CURRENT_CHART_VERSION,$CURRENT_CHART_VERSION-$TEST_VERSION,g"

          grep $TEST_OPERATOR_IMAGE bundle/manifests/pelorus-operator.clusterserviceversion.yaml
          grep $TEST_EXPORTER_IMAGE helm-charts/pelorus/charts/exporters/templates/_imagestream_from_image.yaml
          grep $TEST_EXPORTER_IMAGE helm-charts/pelorus/charts/exporters/templates/_deploymentconfig.yaml
          grep $TEST_VERSION Makefile
          grep rc-pelorus-operator Makefile

          helm dep update helm-charts/pelorus
          rm -r helm-charts/pelorus/charts/*.tgz

      # TODO remove!!!
      - name: DEBUG
        run: git diff

      - name: Build and push operator test image
        working-directory: ./pelorus-operator
        run: |
          make podman-build
          podman image ls -a | grep pr$pr_number-$commit_hash
          podman image ls -a | grep rc-pelorus-operator
          make podman-push

      - name: Build and push operator bundle test image
        working-directory: ./pelorus-operator
        run: |
          make bundle-build
          podman image ls -a | grep pr$pr_number-$commit_hash
          podman image ls -a | grep rc-pelorus-operator-bundle
          make bundle-push

      # TODO delete old comments, just have the last on PR
      - name: Comment test command in PR
        uses: "./.github/workflow_templates/comment-pr"
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pr_number: ${{ needs.setup.outputs.pr_number }}
          message: >
            Test images available! ðŸ§ªðŸš€ To test operator with them, run
            ```
            operator-sdk run bundle \
            quay.io/pelorus/rc-pelorus-operator-bundle:vpr${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.commit_hash }} \
            --namespace test-pelorus-operator
            ```
            To clean up environment afterwards, run
            ```
            operator-sdk cleanup pelorus-operator --namespace test-pelorus-operator
            ```
